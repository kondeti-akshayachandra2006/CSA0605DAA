import heapq
from collections import defaultdict

def networkDelayTime(times, n, k):
    graph = defaultdict(list)
    for u, v, w in times:
        graph[u].append((v, w))
    
    min_heap = [(0, k)]
    dist = {i: float('inf') for i in range(1, n + 1)}
    dist[k] = 0
    
    while min_heap:
        time, node = heapq.heappop(min_heap)
        for neighbor, weight in graph[node]:
            if time + weight < dist[neighbor]:
                dist[neighbor] = time + weight
                heapq.heappush(min_heap, (dist[neighbor], neighbor))
    
    max_time = max(dist.values())
    return max_time if max_time < float('inf') else -1

# Example usage
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
print(networkDelayTime(times, n, k))  # Output: 2
