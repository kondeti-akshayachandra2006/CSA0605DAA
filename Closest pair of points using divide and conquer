import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

def closest_pair(points):
    def closest_util(px, py):
        if len(px) <= 3:
            return min((distance(px[i], px[j]), (px[i], px[j])) for i in range(len(px)) for j in range(i + 1, len(px)))

        mid = len(px) // 2
        mid_point = px[mid]

        pyl = [p for p in py if p[0] <= mid_point[0]]
        pyr = [p for p in py if p[0] > mid_point[0]]

        dl, pair_left = closest_util(px[:mid], pyl)
        dr, pair_right = closest_util(px[mid:], pyr)

        d = min(dl, dr)
        d_pair = pair_left if d == dl else pair_right

        strip = [p for p in py if abs(p[0] - mid_point[0]) < d]
        for i in range(len(strip)):
            for j in range(i + 1, len(strip)):
                if (strip[j][1] - strip[i][1]) < d:
                    d = min(d, distance(strip[i], strip[j]))
                    d_pair = (strip[i], strip[j])

        return d, d_pair

    points = sorted(points, key=lambda x: x[0])
    py = sorted(points, key=lambda x: x[1])
    return closest_util(points, py)

# Example usage
points = [(0, 0), (1, 1), (2, 2), (3, 3)]
print(closest_pair(points))
