import numpy as np

def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    
    return dist

n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distance_matrix = floyd_warshall(n, edges)

print("Distance Matrix Before:")
print(np.full((n, n), float('inf')))
print("Distance Matrix After:")
print(distance_matrix)
