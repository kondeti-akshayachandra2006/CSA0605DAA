def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        if not swapped:
            break
    return arr

# Time Complexity Analysis
def analyze_bubble_sort():
    best_case = "O(n) when the array is already sorted."
    worst_case = "O(n^2) when the array is sorted in reverse order."
    average_case = "O(n^2) for random order."
    
    comparison = (
        "Bubble Sort is less efficient than Insertion Sort (O(n^2) worst case) "
        "and significantly slower than Quick Sort (O(n log n) average case). "
        "Its quadratic time complexity makes it unsuitable for large datasets."
    )
    
    return best_case, worst_case, average_case, comparison

# Example Usage
arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = bubble_sort(arr)
best, worst, average, comparison = analyze_bubble_sort()
print(f"Sorted Array: {sorted_arr}")
print(f"Best Case: {best}, Worst Case: {worst}, Average Case: {average}")
print(comparison)
