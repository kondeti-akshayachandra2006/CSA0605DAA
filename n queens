def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, len(board)), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_n_queens(board, col):
    if col >= len(board[0]):
        return True
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            if solve_n_queens(board, col + 1):
                return True
            board[i][col] = 0
    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))

# Example for an 8x10 board
board_8x10 = [[0]*10 for _ in range(8)]
solve_n_queens(board_8x10, 0)
print_board(board_8x10)

# Example for a 5x5 board with obstacles
board_5x5 = [[0]*5 for _ in range(5)]
board_5x5[2][2] = -1  # obstacle
solve_n_queens(board_5x5, 0)
print_board(board_5x5)

# Example for a 6x6 board with restricted positions
board_6x6 = [[0]*6 for _ in range(6)]
restricted_positions = [(1, 1), (3, 3)]
for r, c in restricted_positions:
    board_6x6[r][c] = -1  # restricted
solve_n_queens(board_6x6, 0)
print_board(board_6x6)
