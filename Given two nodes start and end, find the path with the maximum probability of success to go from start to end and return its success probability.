import heapq
from collections import defaultdict

def maxProbability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    for (a, b), prob in zip(edges, succProb):
        graph[a].append((b, prob))
        graph[b].append((a, prob))
    
    max_heap = [(-1, start)]
    probabilities = {i: 0 for i in range(n)}
    probabilities[start] = 1
    
    while max_heap:
        prob, node = heapq.heappop(max_heap)
        prob = -prob
        
        if node == end:
            return prob
        
        for neighbor, edge_prob in graph[node]:
            new_prob = prob * edge_prob
            if new_prob > probabilities[neighbor]:
                probabilities[neighbor] = new_prob
                heapq.heappush(max_heap, (-new_prob, neighbor))
    
    return 0
